# 数据源集合
dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:3306/venue-reservation?useUnicode=true&characterEncoding=UTF-8&rewriteBatchedStatements=true&allowMultiQueries=true&serverTimezone=Asia/Shanghai
    username: root
    password: 12345678

rules:
  - !SHARDING
    tables:
      user:
        # 真实数据节点，比如数据库源以及数据库在数据库中真实存在的
        actualDataNodes: ds_0.user_${0..15}
        # 分表策略
        tableStrategy:
          # 用于单分片键的标准分片场景
          standard:
            # 分片键
            shardingColumn: user_name
            # 分片算法，对应 rules[0].shardingAlgorithms
            shardingAlgorithmName: common_table_hash_mod
    # 分片算法
    shardingAlgorithms:
      # 数据表分片算法 使用的分片算法，根据数据的hashcode来进行取模（根据上面的配置知道是mod 16），值是多少就被分配到哪个表中
      common_table_hash_mod:
        # 根据分片键 Hash 分片
        type: HASH_MOD
        # 分片数量
        props:
          sharding-count: 16
    # 展现逻辑 SQL & 真实 SQL
    # 逻辑SQL：select * from t_user where username = 'admin'
    # 真实SQL：select * from t_user_0 where username = 'admin'
  # 数据加密存储规则
  - !ENCRYPT
    # 需要加密的表集合
    tables:
      # 用户表
      user:
        # 用户表中哪些字段需要进行加密
        columns:
          # 手机号字段，逻辑字段，不一定是在数据库中真实存在
          phone_number:
            # 手机号字段存储的密文字段，这个是数据库中真实存在的字段
            cipherColumn: phone_number
            # 身份证字段加密算法
            encryptorName: common_encryptor
          email:
            cipherColumn: email
            encryptorName: common_encryptor
          password:
            cipherColumn: password
            encryptorName: common_encryptor
        # 是否按照密文字段查询
        queryWithCipherColumn: true
    # 加密算法
    encryptors:
      # 自定义加密算法名称
      common_encryptor:
        # 加密算法类型
        # AES 可逆
        type: AES
        props:
          # AES 加密密钥，密钥千万不能泄露，不然拿到数据就可以破解了
          aes-key-value: dadh423h343hg
props:
  sql-show: true